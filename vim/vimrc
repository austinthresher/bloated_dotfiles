" Options {{{
" Always use UTF-8
set encoding=utf-8
scriptencoding utf-8
" Disable vi-compatible defaults
" Allow folding in files using {{{ and }}}
set foldenable
set foldmethod=marker
" No annoying sounds / flashes
set noerrorbells
" Allow files to customize settings on open
set modeline
" Characters used when list=on
set listchars=eol:$,tab:>\ ,extends:>,precedes:<,nbsp:+,trail:_
" Character used to mark wrapped lines
set showbreak==>\
" Copy the indentation from the previous line
set autoindent
" Short blink when typing matching parens
set showmatch
set matchtime=1
" Allow leaving modified buffers without saving
set hidden
" Try to keep windows similarly sized
set equalalways
set eadirection=both
" Don't show the active mode
set noshowmode
" Search as you're typing
set incsearch
set hlsearch
" Allow backspacing over everything
set backspace=indent,eol,start
" Enable the mouse
set mouse=a
" Set US English for spellcheck
set spelllang=en_us
" Always show statusbar
set laststatus=2
" Don't wrap lines by default
set nowrap
" Don't page output
set more
" Default to new windows appearing below current
set splitbelow
" Don't try to set the cursor
set guicursor=
" Preview window is small
"set previewheight=3
" CursorHold kicks in after 1/10 second
set updatetime=100
" Reduce screen artifacts by delaying redraw
set lazyredraw
" Show cmd in progress
set showcmd
" Recursive searching
set path+=**
" Tab completion menu
set wildmenu
" Don't scroll near borders, use an autocmd to do that
set scrolloff=0
set sidescrolloff=0
set sidescroll=80
" Allow windows to collapse completely
set winminwidth=1
set winminheight=1
set completeopt+=menuone,noinsert,preview,longest
" Default tab settings
set shiftwidth=4
set softtabstop=4
set expandtab
" Use line drawing char for vsp, spaces for folds
if has('nvim')
    set fillchars=vert:â”‚,fold:\ ,eob:\ ,diff:-
else " vim doesn't have the eob option
    set fillchars=vert:â”‚,fold:\ ,diff:-
endif
" Use filetype-based plugin and indent scripts
filetype plugin indent on
try
    colorscheme lyra
endtry
" }}}
" Functions {{{
" FIXME this should go somewhere else
let b:statuslime_right = has('nvim') ? 'N' : 'V'
func! SetStatusLime()
    if has('nvim')
        let b:statuslime_left = neomake#statusline#get(bufnr('%'), {
              \ 'format_running': '{{running_job_names}}â€¦',
              \ 'format_loclist_ok': 'âœ“',
              \ 'format_quickfix_ok': '',
              \ 'format_quickfix_issues': '%s',
              \ 'format_loclist_type_W': ' {{type}}:{{count}} ',
              \ })
    endif
    return ''
endfunc

" Useful for debugging syntax highlighting
func! HiAtCur()
    let l:name = ''
    for id in synstack(line('.'), col('.'))
        let l:name = synIDattr(id, 'name')
        echo l:name
    endfor
    if l:name isnot# ''
        exec 'hi '.l:name
    endif
endfunc
nmap <leader>c :call HiAtCur()<cr>
" }}}
" Plugins {{{

if has('nvim')
    let g:helper_plug_path = $HOME.'/.config/nvim/repos'
else
    let g:helper_plug_path = $HOME.'/.vim/repos'
endif

call helper#begin()

" TODO: Compare cpp highlighters
"call helper#plug('octol/vim-cpp-enhanced-highlight')
call helper#plug('bfrg/vim-cpp-modern')
call helper#plug('ap/vim-buftabline')
call helper#plug('ekalinin/dockerfile.vim')
call helper#plug('google/vim-searchindex')
call helper#plug('guns/xterm-color-table.vim')
call helper#plug('junegunn/gv.vim')
call helper#plug('junegunn/vim-easy-align')
call helper#plug('machakann/vim-sandwich')
call helper#plug('mboughaba/i3config.vim')
call helper#plug('michaeljsmith/vim-indent-object')
call helper#plug('peterrincker/vim-argumentative')
call helper#plug('reedes/vim-litecorrect')
call helper#plug('rhysd/conflict-marker.vim')
call helper#plug('rhysd/git-messenger.vim')
call helper#plug('roxma/vim-paste-easy')
call helper#plug('sheerun/vim-polyglot')
call helper#plug('tbastos/vim-lua')
call helper#plug('thinca/vim-ref')
call helper#plug('tpope/vim-abolish')
call helper#plug('tpope/vim-commentary')
call helper#plug('tpope/vim-eunuch')
call helper#plug('tpope/vim-fugitive')
call helper#plug('tpope/vim-rsi')
call helper#plug('tpope/vim-sensible')
call helper#plug('tpope/vim-unimpaired')
call helper#plug('tpope/vim-vinegar')
call helper#plug('tpope/vim-apathy')
call helper#plug('tpope/vim-markdown')
call helper#plug('wellle/visual-split.vim')
call helper#plug('jvirtanen/vim-octave')
call helper#plug('mattboehm/vim-accordion')
call helper#plug('terryma/vim-multiple-cursors')

if has('nvim') " IDE-style features for nvim
    call helper#plug('neomake/neomake')
    "    call helper#plug('dense-analysis/ale')
    "    call helper#plug('chiel92/vim-autoformat')
    "    call helper#plug('prabirshrestha/async.vim')
    "    call helper#plug('prabirshrestha/vim-lsp')
    "    call helper#plug('prabirshrestha/asyncomplete.vim')
    "    call helper#plug('prabirshrestha/asyncomplete-lsp.vim')
endif

call helper#end()
" }}}
" Maps {{{
if has('terminal')
    " Navigate out of terminal mode more easily
    tnoremap <esc> <c-\><c-n>
    tnoremap <c-w> <c-\><c-n><c-w>
endif
" Quick reload of vimrc
nnoremap <leader>V :source $MYVIMRC<cr>
" Clear search with <C-L>
nnoremap <c-l> :noh<cr><c-l>

" Use ` as optional wincmd prefix
nnoremap ` <c-w>
nnoremap <c-w>` `

nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

nmap <silent><leader>? <Plug>(helper-toggle)
noremap <silent><leader>g :GitMessenger<cr>

nmap ga <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)

nmap <buffer>]x <Plug>(conflict-marker-next-hunk)
nmap <buffer>[x <Plug>(conflict-marker-prev-hunk)

xmap <leader>p <Plug>(Visual-Split-SplitAbove)
xmap <leader>n <Plug>(Visual-Split-Resize)
nmap <leader>p <Plug>(Visual-Split-SplitAbove)
nmap <leader>n <Plug>(Visual-Split-Resize)

nnoremap <leader><pageup> :AccordionZoomOut<CR>
nnoremap <leader><pagedown> :AccordionZoomIn<CR>

nnoremap <c-w>2 :Accordion 2<CR>
nnoremap <c-w>3 :Accordion 3<CR>
nnoremap <c-w>4 :Accordion 4<CR>

" Ctrl+K to search for cursor text and show in quickfix
nnoremap <c-k> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" }}}
" Autocmds & Plugin Configuration {{{

augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

let g:buftabline_indicators = 1
let g:buftabline_numbers = 0

let g:git_messenger_include_diff = v:true
let g:git_messenger_max_popup_height = 8

let g:conflict_marker_enable_mappings = 0

let g:formatterpath = [$HOME.'/.local/bin']

au VimEnter * silent! AccordionAll 2

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
endif

let g:multi_cursor_use_default_mapping=0

if has('nvim')
    call neomake#configure#automake({  
            \ 'TextChanged': {},
            \ 'InsertLeave': {},
            \ 'BufWritePost': {'delay': 0},
            \ 'BufWinEnter': {},
            \}, 500)
    let g:neomake_open_list          = v:true
    let g:neomake_list_height        = 5
    let g:neomake_virtualtext_prefix = ' ðŸ¯€ '
    let g:neomake_error_sign         = { 'text': 'â•³', 'texthl': 'Error' }
    let g:neomake_warning_sign       = { 'text': 'âœ–', 'texthl': 'Error' }
    let g:neomake_info_sign          = { 'text': 'â–·' }
    let g:neomake_message_sign       = { 'text': 'â–¶' }
    call neomake#signs#RedefineErrorSign()
    call neomake#signs#RedefineWarningSign()
endif
" }}}
" Neovim IDE Setup {{{
if !has('nvim') | finish | endif

set termguicolors

" Autoformat on save
au BufWrite * silent! Autoformat

let g:ale_hover_to_preview = 1
let g:ale_completion_enabled = 0
let g:ale_virtualtext_cursor = 1
let g:ale_virtualtext_prefix = ' ðŸ¯€ '
let g:ale_sign_error   = 'âœ˜ '
let g:ale_sign_warning = 'âœ— '
let g:ale_use_global_executables = 1
let g:ale_hover_to_preview = 1
let g:ale_cursor_detail = 1
let g:ale_echo_cursor = 0

let s:lsp_map = {}


if executable('clangd')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd']},
                \ 'whitelist': ['cpp', 'c']
                \ })
    let s:lsp_map['c']   = 'clangd'
    let s:lsp_map['cpp'] = 'clangd'
endif

if executable('pyls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->['pyls']},
                \ 'whitelist': ['python'],
                \ })
    let s:lsp_map['python'] = 'pyls'
endif

if executable('bash-language-server')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'bash-language-server',
                \ 'cmd': {server_info->['bash-language-server']},
                \ 'whitelist': ['sh'],
                \ })
    let s:lsp_map['sh'] = 'bls'
endif

if executable('docker-langserver')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'docker-langserver',
                \ 'cmd': {server_info->['docker-langserver']},
                \ 'whitelist': ['Dockerfile'],
                \ })
    let s:lsp_map['Dockerfile'] = 'dls'
endif

let g:lsp_preview_doubletap    = v:false
let g:lsp_signs_enabled        = v:false
let g:lsp_virtual_text_enabled = v:false
let g:lsp_diagnostics_enabled  = v:false

" The preview window does not update while typing / moving cursor
" inside signature help. This function should continue to show
" the help while the arguments are being entered.
function! s:sig()
    " TODO
endfunc

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    nmap <buffer> <leader>D <plug>(lsp-peek-definition)
    nmap <buffer> <leader>d <plug>(lsp-peek-declaration)
    nmap <buffer> <leader>R <plug>(lsp-rename)
    nmap <buffer> <leader>s <plug>(lsp-signature-help)
    nmap <buffer> <leader>r <plug>(lsp-references)
    nmap <buffer> <leader>h <plug>(lsp-hover)
    imap <c-space> <Plug>(asyncomplete_force_refresh)
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
    let b:statuslime_right = s:lsp_map[&filetype]
endfunction

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options())

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
" }}}
