
" Plugins {{{

try
	call plug#begin('~/.vim/plugs')

	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-unimpaired'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-sleuth'
	Plug 'bling/vim-bufferline'
	if executable('ctags')
		Plug 'ludovicchabant/vim-gutentags'
	endif

	call plug#end()
catch
	echo "vim-plug is missing or broken"
endtry

" }}}

" Options {{{
" Disable vi-compatible defaults
set nocompatible
" Allow folding in files using {{{ and }}}
set foldenable
set foldmethod=marker
" Always use UTF-8
set encoding=utf-8
scriptencoding utf-8
" No annoying sounds / flashes
set noerrorbells
" Allow files to customize settings on open
set modeline
" Characters used when list=on
set listchars=eol:$,tab:>\ ,extends:>,precedes:<,nbsp:+,trail:_
" Character used to mark wrapped lines
set showbreak==>\
" Copy the indentation from the previous line
set autoindent
" Short blink when typing matching parens
set showmatch
set matchtime=1
" Allow leaving modified buffers without saving
set hidden
" Try to keep windows similarly sized
set equalalways
set eadirection=both
" Don't show the active mode
set noshowmode
" Search as you're typing
set incsearch
" Allow backspacing over everything
set backspace=indent,eol,start
" Spaces for status line and fold
"set fillchars=stl:\ ,stlnc:\ ,fold:\ ,eob:~
" Enable the mouse
" set mouse=a " Disabled, having some issues with Konsole
" Set US English for spellcheck
set spelllang=en_us
" Always show statusbar
set laststatus=2
" Don't wrap lines by default
set nowrap
" Don't page output
set nomore
" Use relative line numbers
set relativenumber
set number
filetype plugin indent on
" Default to new windows appearing below current
set splitbelow
" Don't try to set the cursor
set guicursor=
" Preview window is 1 line tall
set previewheight=1
" CursorHold kicks in after half a second
set updatetime=500

" }}}

" Functions {{{

function! s:is_loaded(name)
	if empty(filter(split(execute('scriptnames'), "\n"),
		\ 'v:val =~? "'.a:name.'"'))
		return 0
	endif
	return 1
endfunc

" Wrapper for setting highlights
function! s:hi(group, fg, bg, attr)
	let l:cmd = [ 'hi', a:group, 'guifg='.a:fg[0], 'guibg='.a:bg[0],
		\ 'gui='.a:attr, 'ctermfg='.a:fg[1], 'ctermbg='.a:bg[1],
		\ 'cterm='.a:attr ]
	execute join(l:cmd, ' ')
endfunc

" }}}

" Color Palette {{{

" srcery color palette
let s:black          = ['#1C1B19', 0]
let s:red            = ['#EF2F27', 1]
let s:green          = ['#519F50', 2]
let s:yellow         = ['#FBB829', 3]
let s:blue           = ['#2C78BF', 4]
let s:magenta        = ['#E02C6D', 5]
let s:cyan           = ['#0AAEB3', 6]
let s:white          = ['#D0BFA1', 7]
let s:bright_black   = ['#918175', 8]
let s:bright_red     = ['#F75341', 9]
let s:bright_green   = ['#98BC37', 10]
let s:bright_yellow  = ['#FED06E', 11]
let s:bright_blue    = ['#68A8E4', 12]
let s:bright_magenta = ['#FF5C8F', 13]
let s:bright_cyan    = ['#53FDE9', 14]
let s:bright_white   = ['#FCE8C3', 15]

" xterm colors.
let s:orange        = ['#FF5F00', 202]
let s:bright_orange = ['#FF8700', 208]
let s:hard_black    = ['#121212', 233]
let s:xgray1        = ['#262626', 235]
let s:xgray2        = ['#303030', 236]
let s:xgray3        = ['#3A3A3A', 237]
let s:xgray4        = ['#444444', 238]
let s:xgray5        = ['#4E4E4E', 239]
let s:xgray6        = ['#585858', 240]

let s:none = ['NONE', 'NONE']

" }}}

" Highlights {{{

call s:hi('Normal', s:bright_white, s:black, 'NONE')

for group in ['Visual', 'VisualNOS', 'Search', 'IncSearch']
	call s:hi(group, s:none, s:none, 'inverse')
endfor

for group in ['NonText', 'SpecialKey']
	call s:hi(group, s:xgray4, s:none, 'NONE')
endfor

call s:hi('MatchParen', s:bright_magenta, s:none, 'bold')
call s:hi('Conceal', s:blue, s:none, 'NONE')
call s:hi('StatusLine', s:bright_white, s:xgray1, 'NONE')
call s:hi('VertSplit', s:bright_white, s:none, 'NONE')
call s:hi('WildMenu', s:blue, s:black, 'bold')
call s:hi('ErrorMsg', s:bright_white, s:red, 'NONE')
call s:hi('Directory', s:green, s:none, 'bold')
call s:hi('Title', s:green, s:none, 'bold')
call s:hi('MoreMsg', s:yellow, s:none, 'bold')
call s:hi('Question', s:orange, s:none, 'bold')
call s:hi('Warning', s:red, s:none, 'bold')

call s:hi('Cursor', s:black, s:yellow, 'NONE')
hi! link vCursor Cursor
hi! link iCursor Cursor
hi! link lCursor Cursor

call s:hi('Special', s:orange, s:none, 'NONE')
call s:hi('Comment', s:bright_black, s:none, 'italic')
call s:hi('Todo', s:bright_white, s:black, 'bold,italic')
call s:hi('Error', s:bright_white, s:red, 'bold')
call s:hi('String', s:bright_green, s:none, 'italic')

for group in ['Statement', 'Conditional', 'Repeat', 'Label', 'Exception', 'Keyword']
	call s:hi(group, s:red, s:none, 'NONE')
endfor

for group in ['Identifier', 'PreProc', 'Include', 'Define', 'PreCondit', 'Structure']
	call s:hi(group, s:cyan, s:none, 'NONE')
endfor

call s:hi('Function', s:yellow, s:none, 'NONE')
call s:hi('Macro', s:orange, s:none, 'NONE')

for group in ['Constant', 'Character', 'Boolean', 'Number', 'Float']
	call s:hi(group, s:bright_magenta, s:none, 'NONE')
endfor

call s:hi('Type', s:bright_blue, s:none, 'NONE')
call s:hi('StorageClass', s:orange, s:none, 'NONE')
call s:hi('Typedef', s:magenta, s:none, 'NONE')
call s:hi('Delimiter', s:bright_black, s:none, 'NONE')

" Make folds blend in so that the status bar and splits are easier to identify
call s:hi('Folded', s:none, s:none, 'italic')
call s:hi('LineNr', s:white, s:xgray1, 'NONE')
call s:hi('CursorLineNr', s:xgray1, s:bright_black, 'NONE')
call s:hi('StatusLineNC', s:xgray1, s:hard_black, 'NONE')

call s:hi('Pmenu', s:bright_white, s:xgray2, 'NONE')
call s:hi('PmenuSel', s:bright_white, s:magenta, 'bold')

call s:hi('DiffDelete', s:red, s:black, 'none')
call s:hi('DiffAdd', s:green, s:black, 'none')
call s:hi('DiffChange', s:cyan, s:black, 'none')
call s:hi('DiffText', s:yellow, s:black, 'none')

if has('spell')
	call s:hi('SpellCap', s:none, s:magenta, 'underline')
	call s:hi('SpellBad', s:none, s:red, 'underline')
	call s:hi('SpellLocal', s:none, s:yellow, 'underline')
	call s:hi('SpellRare', s:none, s:cyan, 'underline')
endif
if has('terminal')
	call s:hi('Terminal', s:bright_white, s:hard_black, 'NONE')
endif

" Used by statuslime
call s:hi('LimeNormal',   s:hard_black,    s:white,   'bold')
call s:hi('LimeVisual',   s:hard_black,    s:blue,    'bold')
call s:hi('LimeInsert',   s:hard_black,    s:yellow,  'bold')
call s:hi('LimeReplace',  s:hard_black,    s:orange,  'bold')
call s:hi('LimeTerminal', s:hard_black,    s:green,   'bold')
call s:hi('LimeCommand',  s:hard_black,    s:magenta, 'bold')
call s:hi('LimeShell',    s:hard_black,    s:cyan,    'bold')
call s:hi('LimeOther',    s:hard_black,    s:red,     'bold')
call s:hi('LimeInactive', s:hard_black,    s:xgray3,  'NONE')
call s:hi('LimeFile',     s:bright_white,  s:xgray3,  'NONE')
call s:hi('LimeFunc',     s:bright_orange, s:xgray1,  'NONE')
call s:hi('LimeError',    s:bright_red,    s:xgray1,  'bold')
call s:hi('LimeRuler',    s:bright_white,  s:xgray2,  'NONE')

" }}}


" }}}

" Maps {{{

if has("terminal")
	" Navigate out of terminal mode more easily
	tnoremap <esc> <c-\><c-n>
	tnoremap <c-w> <c-\><c-n><c-w>
endif
" Reset layout
nnoremap <leader>r <C-W>=
" Quick reload of vimrc
nnoremap <leader>R :source $MYVIMRC<cr>
" Toggle spellcheck
nnoremap <leader>S :set spell!<cr>
" Clear search with <C-L>
nnoremap <c-l> :noh<cr><c-l>

nnoremap ` <c-w>
nnoremap <c-w>` `

" }}}

" Autocmds {{{
" }}}

" Plugin Configuration {{{

let g:bufferline_rotate = 1
let g:bufferline_show_bufnr = 0
let g:bufferline_active_buffer_left = '[ '
let g:bufferline_fname_mod = ':.'

let g:gutentags_generate_on_empty_buffer = 1
let g:gutentags_ctags_exclude = ['*.txt', '*.md', 'INSTALL', 'README', 'LICENSE' ]
let g:gutentags_ctags_exclude_wildignore = 1

" }}}
