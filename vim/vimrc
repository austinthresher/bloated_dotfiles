" Functions {{{
" FIXME this should go somewhere else
let b:statuslime_right = has('nvim') ? 'N' : 'V'
func! SetStatusLime()
    let b:statuslime_left = ''
    return ''
endfunc

" Emacs style scrolling where the view re-centers on cursor
func! CenterOnScroll()
    if exists('b:last_topline') == v:false
        let b:last_topline = 1
    endif
    if exists('b:last_curline') == v:false
        let b:last_curline = 1
    endif
    let l:topline = winsaveview()['topline']
    let l:curline = line('.')
    if l:topline != b:last_topline && l:curline != b:last_curline
        noa norm zz
    endif
    let b:last_topline = l:topline
    let b:last_curline = l:curline
endfunc
au CursorMoved,CursorMovedI * call CenterOnScroll()

" Useful for debugging syntax highlighting
func! HiAtCur()
    let l:name = ''
    for id in synstack(line('.'), col('.'))
        let l:name = synIDattr(id, 'name')
        echo l:name
    endfor
    if l:name isnot ''
        exec 'hi '.l:name
    endif
endfunc
nmap <leader>c :call HiAtCur()<cr>
" }}}
" Plugins {{{

if has('nvim')
    let g:helper_plug_path = $HOME.'/.config/nvim/repos'
else
    let g:helper_plug_path = $HOME.'/.vim/repos'
endif

call helper#begin()

" TODO: Compare cpp highlighters
"call s:plug('bfrg/vim-cpp-modern', v:false)
"call s:plug('octol/vim-cpp-enhanced-highlight', v:false)

call helper#plug('ap/vim-buftabline')
call helper#plug('ekalinin/dockerfile.vim')
call helper#plug('google/vim-searchindex')
call helper#plug('guns/xterm-color-table.vim')
call helper#plug('junegunn/gv.vim')
call helper#plug('junegunn/vim-easy-align')
call helper#plug('machakann/vim-sandwich')
call helper#plug('mboughaba/i3config.vim')
call helper#plug('michaeljsmith/vim-indent-object')
call helper#plug('peterrincker/vim-argumentative')
call helper#plug('reedes/vim-litecorrect')
call helper#plug('rhysd/conflict-marker.vim')
call helper#plug('rhysd/git-messenger.vim')
call helper#plug('roxma/vim-paste-easy')
call helper#plug('sheerun/vim-polyglot')
call helper#plug('tbastos/vim-lua')
call helper#plug('thinca/vim-ref')
call helper#plug('tpope/vim-abolish')
call helper#plug('tpope/vim-commentary')
call helper#plug('tpope/vim-eunuch')
call helper#plug('tpope/vim-fugitive')
call helper#plug('tpope/vim-rsi')
call helper#plug('tpope/vim-sensible')
call helper#plug('tpope/vim-unimpaired')
call helper#plug('tpope/vim-vinegar')
call helper#plug('tpope/vim-apathy')
call helper#plug('tpope/vim-markdown')
call helper#plug('wellle/visual-split.vim')
call helper#plug('jvirtanen/vim-octave')
call helper#plug('mattboehm/vim-accordion')

if has('nvim') " IDE-style features for nvim
    call helper#plug('dense-analysis/ale')
    call helper#plug('chiel92/vim-autoformat')
    call helper#plug('prabirshrestha/async.vim')
    call helper#plug('prabirshrestha/vim-lsp')
    call helper#plug('prabirshrestha/asyncomplete.vim')
    call helper#plug('prabirshrestha/asyncomplete-lsp.vim')
endif

call helper#end()
" }}}
" Options {{{
" Disable vi-compatible defaults
set nocompatible
" Allow folding in files using {{{ and }}}
set foldenable
set foldmethod=marker
" Always use UTF-8
set encoding=utf-8
scriptencoding utf-8
" No annoying sounds / flashes
set noerrorbells
" Allow files to customize settings on open
set modeline
" Characters used when list=on
set listchars=eol:$,tab:>\ ,extends:>,precedes:<,nbsp:+,trail:_
" Character used to mark wrapped lines
set showbreak==>\
" Copy the indentation from the previous line
set autoindent
" Short blink when typing matching parens
set showmatch
set matchtime=1
" Allow leaving modified buffers without saving
set hidden
" Try to keep windows similarly sized
set equalalways
set eadirection=both
" Don't show the active mode
set noshowmode
" Search as you're typing
set incsearch
" Allow backspacing over everything
set backspace=indent,eol,start
" Enable the mouse
set mouse=a
" Set US English for spellcheck
set spelllang=en_us
" Always show statusbar
set laststatus=2
" Don't wrap lines by default
set nowrap
" Don't page output
set more
" Default to new windows appearing below current
set splitbelow
" Don't try to set the cursor
set guicursor=
" Preview window is 1 line tall
"set previewheight=1
" CursorHold kicks in after 1/10 second
set updatetime=100
" Show cmd in progress
set showcmd
" Recursive searching
set path+=**
" Tab completion menu
set wildmenu
" Don't scroll near borders, use an autocmd to do that
set scrolloff=0
" Allow windows to collapse completely
set winminwidth=1
set winminheight=1
set completeopt+=menuone
set completeopt+=noinsert
" Default tab settings
set shiftwidth=4
set softtabstop=4
set expandtab
" Use line drawing char for vsp, spaces for folds
set fillchars=vert:â”‚,fold:\ ,diff:-
" Use filetype-based plugin and indent scripts
filetype plugin indent on
try
    colorscheme lyra
endtry
" }}}
" Maps {{{
if has("terminal")
    " Navigate out of terminal mode more easily
    tnoremap <esc> <c-\><c-n>
    tnoremap <c-w> <c-\><c-n><c-w>
endif
" Quick reload of vimrc
nnoremap <leader>V :source $MYVIMRC<cr>
" Clear search with <C-L>
nnoremap <c-l> :noh<cr><c-l>

" Use ` as optional wincmd prefix
nnoremap ` <c-w>
nnoremap <c-w>` `

nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

nmap <silent><leader>? <Plug>(helper-toggle)
noremap <silent><leader>g :GitMessenger<cr>

nmap ga <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)

nmap <buffer>]x <Plug>(conflict-marker-next-hunk)
nmap <buffer>[x <Plug>(conflict-marker-prev-hunk)

xmap <leader>p <Plug>(Visual-Split-SplitAbove)
xmap <leader>n <Plug>(Visual-Split-Resize)
nmap <leader>p <Plug>(Visual-Split-SplitAbove)
nmap <leader>n <Plug>(Visual-Split-Resize)

nnoremap <leader><pageup> :AccordionZoomOut<CR>
nnoremap <leader><pagedown> :AccordionZoomIn<CR>

nnoremap <c-w>2 :Accordion 2<CR>
nnoremap <c-w>3 :Accordion 3<CR>
nnoremap <c-w>4 :Accordion 4<CR>

" Ctrl+K to search for cursor text and show in quickfix
nnoremap <c-k> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" }}}
" Plugin Configuration {{{
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_list_hide = netrw_gitignore#Hide()

let g:indentLine_char_list = ['|', 'Â¦', 'â”†', 'â”Š']
let g:indentLine_setColors = 0

let g:buftabline_indicators = 1
let g:buftabline_numbers = 0

let g:git_messenger_include_diff = v:true
let g:git_messenger_max_popup_height = 8

let g:conflict_marker_enable_mappings = 0

let g:formatterpath = [$HOME.'/.local/bin']

au BufWrite * silent! Autoformat
au VimEnter * silent! AccordionAll 2

let g:ale_sign_error   = 'âœ˜ '
let g:ale_sign_warning = 'âœ— '
let g:ale_use_global_executables = 1

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif

" }}}
" Language Server Configuration {{{
" For now, only enable LSP on neovim. Will configure for vim8 later.
if has('nvim') == 0
    finish
endif


let g:ale_completion_enabled = 0
"set omnifunc=ale#completion#OmniFunc
let g:ale_virtualtext_cursor = 1

"let g:ale_linters=['pylint']
"let g:ale_fixers = ['pycodestyle']

set termguicolors

func SetPreviewTheme()
    if &previewwindow
        hi link String Normal
        "       setlocal syntax=off
    endif
endfunc

au Syntax * call SetPreviewTheme()

let s:lsp_map = {}

let g:lsp_diagnostics_enabled = v:false

if executable('clangd')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd']},
                \ 'whitelist': ['cpp', 'c']
                \ })
    let s:lsp_map['c']   = 'clangd'
    let s:lsp_map['cpp'] = 'clangd'
endif

if executable('pyls')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->['pyls']},
                \ 'whitelist': ['python'],
                \ })
    let s:lsp_map['python'] = 'pyls'
endif

if executable('bash-language-server')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'bash-language-server',
                \ 'cmd': {server_info->['bash-language-server']},
                \ 'whitelist': ['sh'],
                \ })
    let s:lsp_map['sh'] = 'bls'
endif

if executable('docker-langserver')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'docker-langserver',
                \ 'cmd': {server_info->['docker-langserver']},
                \ 'whitelist': ['Dockerfile'],
                \ })
    let s:lsp_map['Dockerfile'] = 'dls'
endif

let g:lsp_preview_doubletap    = 0
let g:lsp_signs_enabled        = 0
let g:lsp_virtual_text_enabled = 0
"let g:lsp_preview_float        = 1
"let g:lsp_virtual_text_prefix  = ' ðŸ¯€ '

" The preview window does not update while typing / moving cursor
" inside signature help. This function should continue to show
" the help while the arguments are being entered.
function! s:sig()
    " TODO
endfunc

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    nmap <buffer> <leader>D <plug>(lsp-peek-definition)
    nmap <buffer> <leader>d <plug>(lsp-peek-declaration)
    nmap <buffer> <leader>R <plug>(lsp-rename)
    nmap <buffer> <leader>s <plug>(lsp-signature-help)
    nmap <buffer> <leader>r <plug>(lsp-references)
    nmap <buffer> <leader>h <plug>(lsp-hover)
    "   autocmd! CursorHold <buffer> :LspHover<CR>
    imap <c-space> <Plug>(asyncomplete_force_refresh)
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
    autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
    let b:statuslime_right = s:lsp_map[&ft]
endfunction

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options())

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
" }}}
