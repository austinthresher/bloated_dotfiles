#!/bin/bash

# Environment variables used for configuration:
#       ENABLE_TIMESTAMP
#       ENABLE_PROMPT_COMMAND
#       ENABLE_TITLE_ESCAPE
#       ENABLE_TRAP
#       ENABLE_GIT

function shorten_path() {
	printf $1 | sed 's/\([^/]\)[^/]*\//\1\//g'
}

function getdir() {
	local dir=$(pwd)
	dir=$(printf "${dir/#$HOME/\~}")
	if [ -z "$LIMITED_SPACE" ]; then
		printf "$dir"
	else
		shorten_path "$dir"
	fi
}

if [ ! -z "$ENABLE_TIMESTAMP" ]; then
	# Counts the number of printable characters in $1, moves the cursor
	# to the (columns - numchars) column, prints string, returns cursor
	# to beginning of line with \r
	function rprint() {
		local str=$1
		local stripped=$(echo $str | sed "s/\x1B\[[0-9;]*[a-zA-Z]//g")
		local cols=${COLUMNS:-$(tput cols)}
		local len=${#stripped}
		local offset=$(expr $cols - $len)
		printf "%${offset}s%s"'\r' "" "$str"
	}
else
	function rprint() { :; }
fi

if [ ! -z "$ENABLE_PROMPT_COMMAND" ]; then
	function prompt_clear() {
		export PROMPT_COMMAND=
	}

	function prompt_add() {
		if [ -z "$PROMPT_COMMAND" ]; then
			export PROMPT_COMMAND="$@"
		else
			export PROMPT_COMMAND="$PROMPT_COMMAND && $@"
		fi
	}
else
	function prompt_clear() { :; }
	function prompt_add() { :; }
fi

if [ ! -z "$ENABLE_TITLE_ESCAPE" ]; then
	function win_title() {
		case "$TERM" in
			screen*|tmux*) printf "\ek$1\e\\" ;;
			linux|xterm*|rxvt*) printf "\e]0;$1\007" ;;
			*) ;;
		esac
		}
	function pane_title() { printf "\e]2;$1\e\\"; }
	function pane_path() { printf "\e]7;$1\e\\"; }
else
	function win_title() { :; }
	function pane_title() { :; }
	function pane_path() { :; }
fi

if [ ! -z "$ENABLE_TRAP" ]; then
	function prompt_tmux() {
		prompt_add 'trap hook_pre debug'
		pane_path "$(getdir)"
	 	pane_title " $(tmux_powerline_sep '')"
		PANETITLE=
	}
	function tmux_powerline_sep() {
		# TODO: Instead of syncing these by hand, set them where
		# both bashrc and tmux can read them
		local BG1=colour0
		local BG2=colour8
		local FG2=colour15
		printf "#[bg=$BG2 fg=$BG1]\ue0b0#[bg=$BG2 fg=$FG2]"
		printf " $1 "
	}
	function hook_post() {
		trap - debug
		if [ -z "$PANETITLE" ]; then
			sec=
		else
			sec=${SECONDS}s
		fi
		pane_title "$PANETITLE $(tmux_powerline_sep $sec)"
		pane_path "$(getdir)"
	}
	function hook_pre() {
		trap - debug
		c=$BASH_COMMAND
		if [[ "$PROMPT_COMMAND" != *"$c"* ]]; then
			PANETITLE="${c%% *}"
		else
			PANETITLE=""
		fi
		pane_title "$PANETITLE $(tmux_powerline_sep $RUNNING_ICON)"
		SECONDS=0
		trap hook_post debug
	}
else
	function prompt_tmux() { :; }
	function tmux_powerline_sep() { :; }
	function hook_post() { :; }
	function hook_pre() { :; }
fi

if [ ! -z "$ENABLE_GIT" ]; then
	function git_branch() {
		git branch 2> /dev/null | sed '/^[^*]/d;s/* \(.*\)/\1/'
	}
	function git_repo() {
		git remote -v 2> /dev/null | sed \
			-e '1s/.*\/\(.*\)\.git.*/\1/;1s/.*\/\(.*\) .*$/\1/;2d'
	}
	function git_changes() {
		git status 2> /dev/null | sed \
			-e '/^Changes/!d' \
			-e 's/^Changes not.*$/\-/g' \
			-e 's/^Changes to.*$/\+/g' \
			| tr -d "\n" \
			| sed -e 's/+-/±/'
	}
	function git_prompt() {
		if [ ! -z "$PS1_GIT" ]; then
			_R=$(git_repo)
			_B=$(git_branch)
			_C=$(git_changes)
			_P=$(printf "%s" $(git_repo)/$(git_branch)$(git_changes))
			if [ "${#_R}" != "0" ]; then
				printf "❰%s/%s%s❱" "$_R" "$_B" "$_C"
			fi
		fi
	}
else
	function git_branch()  { :; }
	function git_repo()    { :; }
	function git_changes() { :; }
	function git_prompt()  { :; }
fi

