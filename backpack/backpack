# DIY simple package installer, backpack
# ======================================

# include guard
[ -n "$BACKPACK_INCLUDED" ] && return || readonly BACKPACK_INCLUDED=1

ghetto_cut() {
	for i in $1; do echo $i; break; done
}

bp_init() {
	export LOCAL_PREFIX="$HOME/.bp"
	export LOCAL_BIN=$LOCAL_PREFIX/bin
	export LOCAL_PKG=$LOCAL_PREFIX/pkg
	export LOCAL_LIB=$LOCAL_PREFIX/lib
	export LOCAL_SRC=$LOCAL_PREFIX/src
	export LOCAL_LOG=$LOCAL_PREFIX/log
	export LOCAL_INC=$LOCAL_PREFIX/include
	mkdir -p $LOCAL_BIN
	mkdir -p $LOCAL_SRC
	mkdir -p $LOCAL_LOG
	mkdir -p $LOCAL_INC
	mkdir -p $LOCAL_PKG
	export SELECTED_PKGS=$@
	export BP_CMD=none
	export PKG_CONFIG_PATH=$LOCAL_PREFIX/share/pkgconfig
}

bp_command() {
	case $1 in
		"install"|"uninstall"|"rm")
			export BP_CMD=$1
			;;
		*)
			echo "Unrecognized command: $1"
			exit 1
			;;
	esac
}

bp_process() {
	if [ "$BP_CMD" == "none" ]; then
		echo "No command given"
		exit 1
	fi
	source $1
}

bp_package() {
	if [[ " $SELECTED_PKGS " =~ .*\ $1\ .* || -z "$SELECTED_PKGS" ]]; then
		export PKG_NAME=$1
		export PKG_URL=$2
		export SRC_DEST=$LOCAL_SRC/$PKG_NAME
		export BIN_DEST=$LOCAL_BIN/$PKG_NAME
		case $BP_CMD in
			"rm")
				printf "removing directory '$PKG_NAME'\n"
				bp_remove_existing
				;;
			"install")
				printf "installing package '$PKG_NAME'"
				bp_fetch_tar $PKG_URL
				bp_configure_make_install "${@:3}"
				;;
			"uninstall")
				printf "uninstalling package '$PKG_NAME'"
				bp_make_uninstall
				;;
			*)
				echo "Unrecognized command: $BP_CMD"
				exit 1
				;;
		esac
	fi
}
export -f bp_package

bp_remove_existing() {
	[ -e "$SRC_DEST" ] && rm -rf "$SRC_DEST"
}

bp_fetch_git() {
	{
		[ ! -e "$SRC_DEST" ] \
			&& git clone "https://github.com/$1" "$SRC_DEST"
	}	>  $LOCAL_LOG/$PKG_NAME.fetch.out \
		2> $LOCAL_LOG/$PKG_NAME.fetch.err
}

bp_download() {
	[ ! -x "$(which curl)" ] && [ ! -x "$(which wget)" ] \
		&& echo "Please install wget or curl." && exit 1
	if [ -x "$(which curl)" ]; then
		# Extract the filename from url and append it to output path
		F=$2/${1##*\/}
		curl -L $1 --output $F
	else
		wget --no-check-certificate -P $2 $1
	fi
	#TODO: check if we accidentally received a text file
}

bp_fetch_tar() {
	{
		FNAME=${1##*\/}
		mkdir -p $SRC_DEST
		#[ ! -e "$LOCAL_PKG/$FNAME" ] &&
		bp_download $1 $LOCAL_PKG
		mkdir -p /tmp/bp
		cd /tmp/bp
		TARCMD="tar x "
		case $FNAME in
			*.tar)
				$TARCMD -f $LOCAL_PKG/$FNAME
				;;
			*.tar.gz)
				gunzip -c $LOCAL_PKG/$FNAME | $TARCMD
				;;
			*.tar.xz)
				xz -c $LOCAL_PKG/$FNAME | $TARCMD
				;;
			*.tar.bz2)
				bunzip2 -c $LOCAL_PKG/$FNAME | $TARCMD
				;;
			*)
				echo "Unknown extension: $FNAME"
				return 1
				;;
		esac
		# Assume a single directory was extracted, try to get its name
		NEW_DIR=$(ghetto_cut $(ls -t | grep -v "*.tar*"))
		echo "created $NEW_DIR, currently in $PWD"
		[ -d "$PWD/$NEW_DIR" ] && mv $PWD/$NEW_DIR/* $SRC_DEST/
		cd $SRC_DEST
		rm -rf /tmp/bp
	}	>  $LOCAL_LOG/$PKG_NAME.fetch.out \
		2> $LOCAL_LOG/$PKG_NAME.fetch.err
}

bp_make_uninstall() {
	export SUCCESS=0
	{
		cd "$SRC_DEST" \
		&& ./configure --prefix=$LOCAL_PREFIX $@\
		&& make -j uninstall \
		&& export SUCCESS=1
	}	>  $LOCAL_LOG/$PKG_NAME.make.out \
		2> $LOCAL_LOG/$PKG_NAME.make.err
	if [ "$SUCCESS" -eq 0 ]; then
		printf " failed. Logs written to $LOCAL_LOG\n"
	else
		printf " completed\n"
	fi
}

bp_configure() {
	_ARGS="LDFLAGS=-L$LOCAL_LIB CPPFLAGS=-I$LOCAL_INC CFLAGS=-I$LOCAL_INC CXXFLAGS=-I$LOCAL_INC $@"
	_C=
	[ -x "./configure" ] && _C=./configure
	[ -x "./config" ] && _C=./config
	_FAILURE=1
	[ -z $_C ] && return 1
	$_C --prefix=$LOCAL_PREFIX $_ARGS && _FAILURE=0
	if [ "$_FAILURE" -eq 1 ]; then
		$_C --prefix=$LOCAL_PREFIX && _FAILURE=0
	fi
	return $_FAILURE
}

bp_configure_make_install() {
	export SUCCESS=0
	{
		cd "$SRC_DEST"
		if [ -e "autogen.sh" ]; then
			./autogen.sh \
			&& printf "." \
			&& bp_configure $@ \
			&& printf "." \
			&& make -j \
			&& printf "." \
			&& make install \
			&& export SUCCESS=1
		elif [ ! -x "./configure" -a ! -x "./config" -a -e "Makefile" ]; then
			mv Makefile Makefile.def
			sed \
				-e "/PREFIX.*=.*/c\PREFIX=$LOCAL_PREFIX" \
				-e "/INSTALL.*=.*/c\INSTALL=$(which install)" \
				-e "/PRESERVEDIR.*=.*/c\PRESERVEDIR=/tmp/preserve" \
				Makefile.def > Makefile
			make -j \
			&& make install \
			&& export SUCCESS=1
		else
			bp_configure $@ \
			&& make -j \
			&& make install \
			&& export SUCCESS=1
		fi
	}	>  $LOCAL_LOG/$PKG_NAME.make.out \
		2> $LOCAL_LOG/$PKG_NAME.make.err
	if [ "$SUCCESS" -eq 0 ]; then
		printf " failed. Logs written to $LOCAL_LOG\n"
	else
		printf " completed\n"
	fi
	# Remove empty logs
	find $LOCAL_LOG -size 0 -print0 | xargs -0 rm --
}
