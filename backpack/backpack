# DIY simple package installer, backpack
# ======================================

BP_COMMAND=$1
BP_CATEGORY=
shift 1

LOCAL_PREFIX="$HOME/.bp"
LOCAL_BIN=$LOCAL_PREFIX/bin
LOCAL_PKG=$LOCAL_PREFIX/pkg
LOCAL_LIB=$LOCAL_PREFIX/lib
LOCAL_SRC=$LOCAL_PREFIX/src
LOCAL_LOG=$LOCAL_PREFIX/log
LOCAL_INC=$LOCAL_PREFIX/include
mkdir -p $LOCAL_BIN
mkdir -p $LOCAL_SRC
mkdir -p $LOCAL_LOG
mkdir -p $LOCAL_INC
mkdir -p $LOCAL_PKG
INSTALLED=$LOCAL_PREFIX/installed
BROKEN=$LOCAL_PREFIX/broken
SELECTED_PKGS=$@
export PKG_CONFIG_PATH=$LOCAL_PREFIX/share/pkgconfig:$LOCAL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
#GNULIB_SRCDIR=$LOCAL_INC/gnulib
export LDFLAGS=-L$LOCAL_LIB $LDFLAGS
export CPPFLAGS=-I$LOCAL_INC $CPP_FLAGS
export CFLAGS=-I$LOCAL_INC $CFLAGS
export CXXFLAGS=-I$LOCAL_INC $CXXFLAGS

SKIP_CATEGORY=0
SKIP_PACKAGE=0

touch $INSTALLED
touch $BROKEN

set_value()       { echo $1 >> $2; sort -u $2 -o $2; }
unset_value()     { f=$(mktemp); cat $2 | grep -Fxv -e $1 > $f; cp $f $2; }
get_value()       { grep -Fxq "$1" $2; }
set_installed()   { set_value $1 $INSTALLED; }
unset_installed() { unset_value $1 $INSTALLED; }
get_installed()   { get_value $1 $INSTALLED; }
set_broken()      { set_value $1 $BROKEN; }
unset_broken()    { unset_value $1 $BROKEN; }
get_broken()      { get_value $1 $BROKEN; }

if [ "$BP_COMMAND" == "status" ]; then
	if [ -z "$SELECTED_PKGS" ]; then
		echo "Installed"
		echo "========="
		for p in $(cat $INSTALLED); do
			echo -e "\t$p"
		done
		echo "Broken"
		echo "======"
		for p in $(cat $BROKEN); do
			echo -e "\t$p"
		done
	else
		for a in $SELECTED_PKGS; do
			is_in_file $a $INSTALLED && echo "$a - installed"
			is_in_file $a $BROKEN && echo "$a - broken"
			is_in_file $a $INSTALLED || is_in_file $a $BROKEN || echo "$a - not found"
		done
	fi
	exit 0
fi

begin_skip() { SKIP_CATEGORY=1; }
end_skip()   { SKIP_CATEGORY=0; }

not_selected() {
	[ ! -z "$BP_CATEGORY" -a "$SKIP_CATEGORY" -ne 0 ] || [ "$SKIP_PACKAGE" -ne 0 ]
}

category() {
	[ ! -z "$SELECTED_PKGS" ] && [ -z "$BP_CATEGORY" ] && [[ " $SELECTED_PKGS " =~ .*\ $1\ .* ]] && BP_CATEGORY=$1
	[ "$BP_CATEGORY" == "$1" ] && end_skip && return 0
	begin_skip
}

package() {
	SKIP_PACKAGE=0
	not_selected && return 0
	if [[ " $SELECTED_PKGS " =~ .*\ $1\ .* ]] || [ "$SELECTED_PKGS" == "$BP_CATEGORY" ]; then
		PKG_NAME=$1
		SRC_DEST=$LOCAL_SRC/$PKG_NAME
		BIN_DEST=$LOCAL_BIN/$PKG_NAME
	else
		SKIP_PACKAGE=1
	fi
}

download() {
	not_selected && return 0
	get_installed $PKG_NAME && return 0
	PKG_URL=$1
	printf "downloading %s from %s\n" $PKG_NAME $PKG_URL
	getfile $PKG_URL $LOCAL_PKG &> $LOCAL_LOG/$PKG_NAME.download
	printf "extracting %s\n" ${PKG_URL##*\/}
	bp_extract $PKG_URL &> $LOCAL_LOG/$PKG_NAME.extract
}

checkout() {
	not_selected && return 0
	get_installed $PKG_NAME && return 0
	rm -f $LOCAL_LOG/$PKG_NAME.git
	printf "pulling %s from %s\n" "$PKG_NAME" "$1"
	[ ! -d $SRC_DEST ] && git clone $1 $SRC_DEST &>> $LOCAL_LOG/$PKG_NAME.git
	cd $SRC_DEST
	git pull &>> $LOCAL_LOG/$PKG_NAME.git
	git submodule update --init --recursive &>> $LOCAL_LOG/$PKG_NAME.git
}

# getfile <src-url> <dst-dir>
getfile() {
	SRC_URL=$1
	DST_DIR=$2
	[ ! -x "$(which curl)" ] && [ ! -x "$(which wget)" ] \
		&& echo "Please install wget or curl." && exit 1
	# Extract the filename from url and append it to output path
	DST_PATH=$DST_DIR/${SRC_URL##*\/}
#	[ -s $DST_PATH ] && return 0
	if [ -x "$(which curl)" ]; then
		curl -L $SRC_URL --output $DST_PATH
	else
		wget --no-check-certificate -P $DST_DIR $SRC_URL
	fi
}

bp_extract() {
	ghetto_cut() {
		for i in $1; do echo $i; break; done
	}
	FNAME=${1##*\/}
	get_broken $PKG_NAME && rm -rf $SRC_DEST && unset_broken $PKG_NAME && echo "removed broken source directory"
	if [ -d $SRC_DEST ]; then
		read -p "Delete existing $SRC_DEST before extracting? " yn
		case $yn in
			y) rm -rf $SRC_DEST ;;
			*) ;;
		esac
	fi
	extractdir=$(mktemp -d 2> /dev/null || mktemp -d -t 'tmpextract')
	mkdir -p $SRC_DEST
	cd $extractdir
	TARCMD="tar x "
	case $FNAME in
		*) #*.tar)
			$TARCMD -f $LOCAL_PKG/$FNAME
			;;
		#*.tar.gz)
			#gunzip -c $LOCAL_PKG/$FNAME | $TARCMD
			#;;
		#*.tar.xz)
			#xz -c $LOCAL_PKG/$FNAME | $TARCMD -J
			#;;
		#*.tar.bz2)
			#bunzip2 -c $LOCAL_PKG/$FNAME | $TARCMD
			#;;
		#*)
			#echo "Unknown extension: $FNAME"
			#rm -rf $extractdir
			#return 1
			#;;
	esac
	# Assume a single directory was extracted, try to get its name
	NEW_DIR=$(ghetto_cut $(ls -t | grep -v "*.tar*"))
	[ -d "$PWD/$NEW_DIR" ] && mv $PWD/$NEW_DIR/* $SRC_DEST/
	cd $SRC_DEST
	rm -rf $extractdir
}

define() {
	not_selected && return 0
	[ "$1" != "$BP_COMMAND" ] && return 0
	shift
	[ "$1" == ":" ] && shift
	DELIM=,
	echo "$BP_COMMAND $PKG_NAME..."
	[ "$BP_COMMAND" == "install" ] && get_installed $PKG_NAME && return 0
	set_broken $PKG_NAME
	while [ $# -gt 0 ]
	do
		printf "\t+$1"
		local args
		local cmd
		local cmdname
		args=()
		case $1 in
			config|configure)
				cmdname=$1
				cmd=$LOCAL_SRC/$PKG_NAME/$1
				shift
				args+=(--prefix=$LOCAL_PREFIX)
				;;
			autogen)
				cmd="sh $LOCAL_SRC/$PKG_NAME/autogen.sh"
				cmdname=$1
				shift
				;;
			*)
				cmdname=$1
				cmd=$1
				shift
				;;
		esac
		while [ $# -gt 0 -a "$1" != "$DELIM" ]
		do
			printf " $1"
			args+=($1)
			shift
		done
		printf "\n"
		shift
		$cmd "${args[@]}" &> $LOCAL_LOG/$PKG_NAME.$cmdname
		ex=$?
		if [ $ex -ne 0 ]
		then
			printf "\tfailed with exit code $ex\n"
			echo "********************************"
			tail $LOCAL_LOG/$PKG_NAME.$cmdname
			echo "********************************"
			return $ex
		fi
	done
	case $BP_COMMAND in
		uninstall)
			unset_installed $PKG_NAME
			;;
		install)
			set_installed $PKG_NAME
			;;
		*) ;;
	esac
	unset_broken $PKG_NAME
	printf "\tcompleted\n"
}

source $backpack_scripts/packages
